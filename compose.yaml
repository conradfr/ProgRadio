name: progradio

services:
  web:
    image: nginx:latest
    ports:
      - '8080:80'
      - '443:443'
    volumes:
      - ./:/var/www
      - ./tools/dev/app.conf:/etc/nginx/conf.d/default.conf
    links:
      - php-fpm

  php-fpm:
    image: php:8-fpm
    build:
      context: ./
      dockerfile: ./tools/dev/Dockerfile_php
    depends_on:
      - database
      - redis
    volumes:
      - ./:/var/www

  spa:
    image: node:lts-alpine
    build:
      context: ./
      dockerfile: ./tools/dev/Dockerfile_spa
    tty: true
    stdin_open: true
    entrypoint: /bin/sh
    working_dir: /app
    #    depends_on:
    #      - php
    volumes:
      - ./:/app
    restart: unless-stopped
    environment:
      NODE_ENV: development

  api:
    build:
      context: ./
      dockerfile: ./tools/dev/Dockerfile_api
    hostname: api
    ports:
      - '4000:4000'
      - '4001:4001'
    volumes:
      - ./:/app
    working_dir: /app/progradio_api
    depends_on:
      - database
      - redis
      - meilisearch
    environment:
      MIX_ENV: dev
      DATABASE_URL: database
      REDIS_HOST: redis

  scraper:
    build:
      context: ./Scraper
      dockerfile: ../tools/dev/Dockerfile_scraper
    container_name: scraper
    working_dir: /usr/app
#    depends_on:
#      - api
    volumes:
      - ./Scraper:/usr/app

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-14}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-progradio}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-123}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-progradio}", "-U", "${POSTGRES_USER:-postgres}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      - ./sql:/var/tmp/sql
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

###> meilisearch/search-bundle ###
  meilisearch:
    image: getmeili/meilisearch:v1.8
    environment:
      # You should definitely change the master key in production
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-sz2d5xeGLME2fDW53tGnuJsEX3L2Q9Xz}
    volumes:
      - meilisearch_data:/meili_data
###< meilisearch/search-bundle ###

  redis:
    image: redis:alpine

volumes:

###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###

###> meilisearch/search-bundle ###
  meilisearch_data:
###< meilisearch/search-bundle ###
