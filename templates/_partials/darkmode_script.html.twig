<script type="text/javascript">
  const themeDataName = 'bsTheme';
  const darkThemeName = 'dark';

  const navLightClassName = 'nav-link-lightmode';
  const navDarkClassName = 'nav-link-darkmode';
  const hiddenClassName = 'd-none';
  const cookieDarkModeName = 'progradio-darkmode';

  const sendDarkModeGaEvent = (mode, auto) => {
    sendGaEvent(`toggle_${mode}${auto === true?'_auto':''}`, 'UI', null, '1');
  }

  const isCurrentlyDarkTime = () => {
    const now = new Date();
    const hour = now.getHours();
    return (hour >= darkModeStartHour) || (hour < darkModeEndHour);
  };

  const setDarkModeCookie = (state) => {
    setCookie(cookieDarkModeName, state);
  };

  const checkColorScheme = () => {
    const hasCookie = document.cookie.split(';').some(item => item.trim().startsWith(`${cookieDarkModeName}=`));

    // we only check the time if dark mode is not set
    if (hasCookie === true) {
      return;
    }

    setColorSchemeMode(isCurrentlyDarkTime());
    // window.setTimeout(checkColorScheme, 3600000);
  };

  const toggleColorSchemeMode = () => {
      // it was dark
      if (themeDataName in document.getElementsByTagName('html')[0].dataset
        && document.getElementsByTagName('html')[0].dataset[themeDataName] === darkThemeName) {
        // remove attribute
        delete document.getElementsByTagName('html')[0].dataset[themeDataName];

        // if not dark time we store the always dark mode choice, else set it to auto
        if (isCurrentlyDarkTime()) {
            setDarkModeCookie(false);
            sendDarkModeGaEvent('light', false);
        } else {
            setDarkModeCookie();
            sendDarkModeGaEvent('light', true);
        }
      } else {
        document.getElementsByTagName('html')[0].dataset[themeDataName] = darkThemeName;

        if (isCurrentlyDarkTime() === false) {
          setDarkModeCookie(true);
          sendDarkModeGaEvent('dark', false);
        } else {
          setDarkModeCookie();
          sendDarkModeGaEvent('dark', true);
        }
      }

    // ui toggle icon
    updateColorSchemeUI();
  };

  const setColorSchemeMode = (state) => {
    if (state === true) {
      document.getElementsByTagName('html')[0].dataset[themeDataName] = darkThemeName;
    } else {
      document.getElementsByTagName('html')[0].classList.remove(themeDataName);
    }

    // ui toggle icon
    updateColorSchemeUI();
  };

  const updateColorSchemeUI = () => {
    // it's now dark mode
    if (themeDataName in document.getElementsByTagName('html')[0].dataset
      && document.getElementsByTagName('html')[0].dataset[themeDataName] === darkThemeName) {
      const darkElems = document.getElementsByClassName(navDarkClassName);
      Array.prototype.forEach.call(darkElems, element => {
        element.classList.add(hiddenClassName);
      });

      const lightElems = document.getElementsByClassName(navLightClassName);
      Array.prototype.forEach.call(lightElems, element => {
        element.classList.remove(hiddenClassName);
      });
    } else {
      const lightElems = document.getElementsByClassName(navLightClassName);
      Array.prototype.forEach.call(lightElems, element => {
        element.classList.add(hiddenClassName);
      });

      const darkElems = document.getElementsByClassName(navDarkClassName);
      Array.prototype.forEach.call(darkElems, element => {
        element.classList.remove(hiddenClassName);
      });
    }
  };

  const nextHourInMs = () => {
    const now = new Date();
    now_h = new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours() + 1, 0, 0, 0);
    return now_h - now;
  }

  // will check for dark mode time starting next hour
  // window.setTimeout(checkColorScheme, nextHourInMs());

  window.addEventListener('focus', checkColorScheme);
  setInterval(checkColorScheme, 60000);
</script>
